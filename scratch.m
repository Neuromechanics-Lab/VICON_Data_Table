

% assemble trial lists
trialdirectoryA = '/Users/lucasmckay/Research/Manuscripts/2017 PD SRM/Analysis/TRIALS A/';
trialdirectoryB = '/Users/lucasmckay/Research/Manuscripts/2017 PD SRM/Analysis/TRIALS B/';

% concatenate lists of source files
srcfiles = [...
	cellfun(@char,cell(py.glob.glob([trialdirectoryA '*.xlsx']))','UniformOutput',false);
	cellfun(@char,cell(py.glob.glob([trialdirectoryB '*.xlsx']))','UniformOutput',false);
	];

% delete entries with the garbage character string ' ~$ '
srcfiles(contains(srcfiles, '~$')) = [];

% work with the following variables
varnames = {
	'uniqueid'
	'obs'
	'redcapid'
	'trialname'
	'trialnum'
	'pertdir_calc_round_deg'
	'sessionnum'
	'filename'
	'stepnum'
	};

% create an empty table
tbl_s = cell2table(cell(0,length(varnames)),'VariableNames',varnames);

for f = srcfiles'
	tbl = readtable(char(f));
	tbl = tbl(:,varnames);
	tbl_s = [tbl_s; tbl];
end

tbl_s.uniqueid = categorical(tbl_s.uniqueid);
tbl_s.redcapid = categorical(tbl_s.redcapid);

t.trials = tbl_s;

% change file locations
tbl_s.filename = strrep(...
	tbl_s.filename,...
	'/Users/Kim/Documents/Ting Lab/Research Projects/2015 BAT Co-Contraction /1 Data (neurog5_ting_ting-data)/',...
	'/Users/lucasmckay/Research/ParkinsonDisease_2016_03/'...
);
% 	'/Volumes/ting/ting-data/neuromechanics-lab/ProcessedMatlabData/ParkinsonDisease_2016_03/'...
tbl_s.filename = strrep(...
	tbl_s.filename,...
	'/Users/Kim/Documents/Ting Lab/Research Projects/2015 BAT Co-Contraction /1b Data (labs_ting_ting-data_neuromechanics-lab_MATFiles_ParkinsonDisease_2016_03)/',...
	'/Users/lucasmckay/Research/BATStudyEmory/'...
	);
tbl_s.filename = regexprep(tbl_s.filename,[filesep 'Session \d+' filesep],filesep);

% further correct filenames
tbl_s.filename = strrep(tbl_s.filename,'BAT116PRE/New Session 1_CorrectedLVDT','BAT116PRE/New Session 1');
tbl_s.filename = strrep(tbl_s.filename,'BAT115PRE/New Session 1_CorrectedLVDT','BAT115PRE/New Session 1');
tbl_s.filename = strrep(tbl_s.filename,'BAT114PRE/New Session 1_CorrectedLVDT','BAT114PRE/New Session 1');
tbl_s.filename = strrep(tbl_s.filename,'BAT113PRE/New Session 1_CorrectedLVDT','BAT113PRE/New Session 1');
tbl_s.filename = strrep(tbl_s.filename,'BAT112PRE/New Session 1_CorrectedLVDT','BAT112PRE/New Session 1');
tbl_s.filename = strrep(tbl_s.filename,'BAT111PRE/New Session 1_CorrectedLVDT','BAT111PRE/New Session 1');

% recode participants with two digit codes as three digit
tbl_s.filename = regexprep(tbl_s.filename,'BAT(\d\d)([A-Z])','BAT0$1$2');

% recode participant BAT104PRE_2 as BAT104PRE
tbl_s.filename = regexprep(tbl_s.filename,'BAT104PRE_2','BAT104PRE');

% loop through and ensure that each trial can be loaded
e = cellfun(@exist,tbl_s.filename);
tabulate(e)

% create a triallist object
t = triallist(tbl_s);

% exclude trials that have not been processed
t.trials(e==0,:) = [];

% load trials; exclude those with steps.
td = createtrialdata(t,'stepnum',0,'timerange',[-0.5 1]);

% calculate kinematic variables in perturbation frames; signals subscripted
% as "_1" are in perturbation direction, otherwise perpendicular
td.changeframes;

% calculate rectified EMG as in previous studies (omitting low-pass filter in the second step)
td.calculateprocessedemg({'EMG_MGAS_R' 'EMG_SOL_R' 'EMG_TA_R' 'EMG_MGAS_L' 'EMG_SOL_L' 'EMG_TA_L'});
td.calculateprocessedemg({'EMG_MGAS_R' 'EMG_SOL_R' 'EMG_TA_R' 'EMG_MGAS_L' 'EMG_SOL_L' 'EMG_TA_L'},'low_pass_Hz',false,'signamesuffix','_proc_unsmoothed');

% after running this program once, and then visually verifying the data
% with plot_and_clean_trials.m, run the following code, the remainder of
% this file, and plot_and_clean_trials.m once more.
save temp.mat
CLEAN_TRIALS = true;
if CLEAN_TRIALS	
	CoMVars = {...
		'COMPosminusLVDT_X'...
		'COMPosminusLVDT_Y'...
		'COMVelo_X'...
		'COMVelo_Y'...
		'COMPosminusLVDT_1'...
		'COMPosminusLVDT_2'...
		'COMVelo_1'...
		'COMVelo_2'...
		};
	td.settonan(CoMVars,'uniqueid','BAT114PRE','trialnum',[7 14 17 18 21]);
	td.deletetrials('uniqueid','BAT114PRE','pertdir_calc_round_deg',[60 270 300]);
	td.deletetrials('uniqueid','BAT115PRE','pertdir_calc_round_deg',[240 270 300]);
	td.deletetrials('uniqueid','BAT106PRE','trialnum',6);
	td.settonan(CoMVars,'uniqueid','BAT106PRE','trialnum',[17 20 7 32]);
	td.deletetrials('uniqueid','BAT106PRE','pertdir_calc_round_deg',[270]);
	td.settonan(CoMVars,'uniqueid','BAT001PRE','trialnum',[31 38 22 36 24 27]);
	td.deletetrials('uniqueid','BAT001PRE','pertdir_calc_round_deg',[60]);	
	td.settonan(CoMVars,'uniqueid','BAT002PRE','trialnum',[40 42]);
	td.deletetrials('uniqueid','BAT002PRE','pertdir_calc_round_deg',[120]);	
	td.settonan(CoMVars,'uniqueid','BAT015PRE','trialnum',[12 39 8]);
	td.deletetrials('uniqueid','BAT021PRE','pertdir_calc_round_deg',[60 120 240]);	
	td.settonan(CoMVars,'uniqueid','BAT022PRE','trialnum',[30 17]);
	td.deletetrials('uniqueid','BAT022PRE','trialnum',[13 16]);
	td.settonan(CoMVars,'uniqueid','BAT025PRE','trialnum',[16]);	
	td.settonan(CoMVars,'uniqueid','BAT027PRE','trialnum',[5 12 14]);
	td.settonan(CoMVars,'uniqueid','BAT033PRE','trialnum',[17 18 20 15 12 29]);
	
	td.deletetrials('uniqueid','BAT015PRE','pertdir_calc_round_deg',[60]);
	td.deletetrials('uniqueid','BAT002PRE','pertdir_calc_round_deg',[60]);
	td.deletetrials('uniqueid','BAT115PRE','pertdir_calc_round_deg',[60 120]);
end


td.calculatetrialaverages(...
	'Signals',{...
	'atime'...
	'EMG_TA_L_proc_unsmoothed'...
	'EMG_MGAS_L_proc_unsmoothed'...
	'EMG_MGAS_R_proc_unsmoothed'...
	'EMG_TA_R_proc_unsmoothed'...
	'EMG_TA_L_proc'...
	'EMG_MGAS_L_proc'...
	'EMG_MGAS_R_proc'...
	'EMG_TA_R_proc'...
	'COMPosminusLVDT_X'...
	'COMPosminusLVDT_Y'...
	'COMPosminusLVDT_1'...
	'COMPosminusLVDT_2'...
	'COMVelo_X'...
	'COMVelo_Y'...
	'COMVelo_1'...
	'COMVelo_2'...
	'COMAccel_X'...
	'COMAccel_Y'...
	'COMAccel_1'...
	'COMAccel_2'...
	'Accels_X'...
	'Accels_Y'...
	'Accels_1'...
	'Accels_2'...
	'LVDT_X'...
	'LVDT_Y'...
	'LVDT_1'...
	'LVDT_2'...
	},...
	'GroupingVariables',{...
	'uniqueid'...
	'pertdir_calc_round_deg'...
	});

% calculate normalization values
td.calculatenormalizationvalues({...
    'EMG_TA_L_proc_unsmoothed_av'...
    'EMG_MGAS_L_proc_unsmoothed_av'...
    'EMG_MGAS_R_proc_unsmoothed_av'...
    'EMG_TA_R_proc_unsmoothed_av'...
    'EMG_TA_L_proc_av'...
    'EMG_MGAS_L_proc_av'...
    'EMG_MGAS_R_proc_av'...
    'EMG_TA_R_proc_av'...
	});

% now calculate normalized EMG
td.calculatenormalizedemg({...
    'EMG_TA_L_proc_unsmoothed_av'...
    'EMG_MGAS_L_proc_unsmoothed_av'...
    'EMG_MGAS_R_proc_unsmoothed_av'...
    'EMG_TA_R_proc_unsmoothed_av'...
    'EMG_TA_L_proc_av'...
    'EMG_MGAS_L_proc_av'...
    'EMG_MGAS_R_proc_av'...
    'EMG_TA_R_proc_av'...
	},{...
    'EMG_TA_L_proc_unsmoothed_norm'...
    'EMG_MGAS_L_proc_unsmoothed_norm'...
    'EMG_MGAS_R_proc_unsmoothed_norm'...
    'EMG_TA_R_proc_unsmoothed_norm'...
    'EMG_TA_L_proc_norm'...
    'EMG_MGAS_L_proc_norm'...
    'EMG_MGAS_R_proc_norm'...
    'EMG_TA_R_proc_norm'...
	});

% code the participants
td.trials.PD = contains(string(td.trials.uniqueid),'BAT0');
td.trialaverages.PD =  contains(string(td.trialaverages.uniqueid),'BAT0');

% create tags
td.trials.tag = regexprep(td.trials.filename,'.*/(BAT\d.*mat$)','$1');
td.trialaverages.tag = [char(td.trialaverages.uniqueid) repmat(' ', td.Naverages,1) num2str(td.trialaverages.pertdir_calc_round_deg) repmat('°, N=', td.Naverages,1) num2str(td.trialaverages.GroupCount)];
		
% save file
save td.mat td


